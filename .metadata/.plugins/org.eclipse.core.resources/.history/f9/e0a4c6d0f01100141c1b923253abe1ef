package com.mygdx.game.entity;

import java.util.ArrayList;

import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.math.Vector2;
import com.mygdx.game.component.Component;
import com.mygdx.game.component.GraphicIdentity;
import com.mygdx.game.component.Health;
import com.mygdx.game.component.Transform;
import com.mygdx.game.utility.ListHolder;

/**
 * @author Bbent_000
 *
 */
public class Entity {
	public String name, tag;
	public int entityType;
	public Transform transform;
	public GraphicIdentity identity;
	
	protected ArrayList<Component> activeComponentList;
	protected ArrayList<Component> inactiveComponentList;
	protected boolean destroyed=false;
	
	/**
	 * Creates an entity with a transform and identity component.
	 * @param name The name of this Entity. This could be used as a generic name such as "Building" or a specific name
	 * such as "Paha's Market". Use as desired.
	 * @param position The starting X and Y position of this Entity.
	 * @param rotation The starting rotation of this Entity.
	 * @param graphic The texture to represent this entity. If null, it will not be drawn.
	 */
	public Entity(String name, Vector2 position, float rotation, Texture graphic, int drawLevel){
		this.name = name;
		this.activeComponentList = new ArrayList<Component>();
		this.inactiveComponentList = new ArrayList<Component>();
		
		this.transform = new Transform(this, position, rotation);
		this.identity = new GraphicIdentity(this, graphic);
		
		this.addToList();
		
		this.addComponent(new Health(this, 100));
	}
	
	
	public void update(float delta){
		for(Component comp : this.activeComponentList){
			comp.update(delta);
			comp.lateUpdate(delta);
		}
	}
	
	public void render(SpriteBatch batch){
		this.identity.render(batch);
	}
	
	public void addToList(int level){
		ListHolder.addEntityToList(this, level);
	}
	
	/**
	 * Adds a component to this Entity.
	 * @param comp The Component to add.
	 */
	public void addComponent(Component comp){
		if(comp.isActive())
			this.activeComponentList.add(comp);
		else
			this.inactiveComponentList.add(comp);
	}
	
	/**
	 * Retrieves a Component from this Entity.
	 * @param c The Component class type to retrieve.
	 * @return The Component if it was found, otherwise null.
	 */
	@SuppressWarnings("unchecked")
	public <T extends Component> T getComponent(Class<T> c){
		for(Component comp : this.inactiveComponentList){
			if(comp.getClass() == c)
				return (T)comp;
		}
		
		for(Component comp : this.activeComponentList){
			if(comp.getClass() == c)
				return (T)comp;
		}
		
		throw new RuntimeException("Component type *" + c + "* doesn't exist.");
		
		//return null;
	}
	
	public boolean removeComponent(Component comp, boolean active){
		if(active) return this.inactiveComponentList.remove(comp);
		return this.activeComponentList.remove(comp);
	}
	
	public boolean isDestroyed(){
		return this.destroyed;
	}
	
	public void destroy(){
		//Destroy all children
		for(Entity child : this.transform.getChildren()){
			child.destroy();
		}
		
		//Remove all children
		if(this.transform.parent != null){
			this.transform.parent.transform.removeChild(this);
			this.transform.parent = null;
		}
		
		//Destroy active components.
		for(Component comp : this.activeComponentList)
			comp.destroy();
		
		//Destroy inactive components
		for(Component comp : this.inactiveComponentList)
			comp.destroy();
		
		//Clear both lists.
		this.activeComponentList.clear();
		this.inactiveComponentList.clear();
		
		//Destroy and clear identity.
		this.identity.destroy();
		this.identity = null;
		
		//Destroy and clear transform.
		this.transform.destroy();
		this.transform = null;
		
		//Set destroyed to true.
		this.destroyed = true;
	}
}
