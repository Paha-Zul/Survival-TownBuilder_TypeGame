package com.mygdx.game.component.character;

import com.badlogic.gdx.math.MathUtils;
import com.mygdx.game.component.AIJobController;
import com.mygdx.game.component.CharacterNeeds;
import com.mygdx.game.component.Inventory;
import com.mygdx.game.component.Inventory.InventoryItem;
import com.mygdx.game.component.Town;
import com.mygdx.game.component.buildings.Building;
import com.mygdx.game.entity.Entity;
import com.mygdx.game.interfaces.AICharacterCompCallback;
import com.mygdx.game.interfaces.Condition;
import com.mygdx.game.jobgroups.GatherResource;
import com.mygdx.game.jobgroups.JobGroup;
import com.mygdx.game.jobgroups.RetrieveItem;
import com.mygdx.game.jobgroups.Sleep;
import com.mygdx.game.utility.Constants;
import com.mygdx.game.utility.Item;
import com.mygdx.game.utility.Timer;

public class AICharacterComp extends CharacterComp {
	AIJobController jobController;
	Town town;
	Inventory inventory;
	AICharacterCompCallback callback;

	public boolean sleeping = false;

	CharacterNeeds needs;

	// Timers
	Timer jobDelay;
	Timer eatTimer;
	Timer sleepTimer;

	Condition condition;

	public AICharacterComp(Entity owner, String name, int type, boolean active) {
		super(owner, name, type, active);

		this.inventory = this.getEntityOwner().getComponent(Inventory.class);
		this.jobController = this.owner.getComponent(AIJobController.class);
		this.jobDelay = new Timer(0);

		this.eatTimer = new Timer(5 + MathUtils.random());
		this.sleepTimer = new Timer(1);

		this.needs = this.owner.addComponent(new CharacterNeeds(this
				.getEntityOwner(), "Needs", 0, false));

		this.needs.currFatigue = 100;
		
		this.callback = (AI) -> AI.sleeping = false;
	}

	public AICharacterComp(Entity owner) {
		this(owner, "AICitizen", 0, true);

	}

	public AICharacterComp(Entity owner, Inventory inventory) {
		this(owner, "AICitizen", 0, true);

		this.inventory = inventory;
	}

	@Override
	public void update(float delta) {
		//Update all timers
		this.jobDelay.update(delta);
		this.eatTimer.update(delta);
		this.sleepTimer.update(delta);
		
		//If the sleeping need is above 80, assign a sleep job.
		if(this.needs.currFatigue >= 80 && !this.sleeping){
			this.jobController.addJobGroup(new Sleep(jobController, home, needs, 10, this.callback));
			this.sleeping = true;
		}
		
		//If we are already sleeping, do nothing
		if(this.sleeping)
			return;
		}
		
		if(this.sleepTimer.done()){
			needs.currFatigue+=10;
			this.sleepTimer.restart();
		}

		// If the eat timer is done.. try to eat and restart.
		if (this.eatTimer.done()) {
			eat();
			this.eatTimer.restart();
		}

		// If there are no jobs and the timer is done, find a new job.
		if (jobController.hasNoJobs() && this.jobDelay.done()) {
			if (this.jobDelay.done()) {
				this.jobController.addJobGroup(new GatherResource(
						this.jobController, "WoodLog", town));
			}
		}

		// If the finding a job has failed, wait some time...
		if (this.jobController.hasFailed()) {
			this.jobDelay.restart(5);
		}
	}

	public void assignTownOwner(Town town) {
		this.town = town;
	}

	public void eat() {
		String tag = "food";
		ItemCriteria getItemWithTag = (item) -> item.item.hasTag(tag);
		Item itemToGet = null;

		// This consumes the item if it is found.
		InventoryItem itemToEat = this.inventory.removeFirstItemFromInventory(
				getItemWithTag, 1);

		// If the itemToEat is null, it means we have no item in our inventory
		// to eat. We must find some from a nearby stockpile or source.
		if (itemToEat == null) {
			getItemWithTag = (item) -> item.item.hasTag(tag)
					&& item.quantity >= 1;

			// Check each stockpile's supply for a food item.
			for (Building building : this.town
					.getBuilding(Constants.BUILDING_STOCKPILE)) {
				Inventory buildingInv = building.getEntityOwner().getComponent(
						Inventory.class); // Get the inventory

				if ((itemToGet = buildingInv.hasInventoryItem(getItemWithTag)) != null) { // If
																							// there
																							// is
																							// an
																							// item
																							// that
																							// has
																							// the
																							// "food"
																							// tag...
					JobGroup getFood = new RetrieveItem(this.jobController,
							"GetFood", 0, itemToGet, 5, buildingInv); // Add a
																		// JobGroup
																		// to
																		// retrieve
																		// the
																		// item.
					getFood.unique = true;
					this.jobController.addJobGroup(getFood); // Add the
																// jobgroup.
					return;
				}
			}
		} else {

			itemToEat.item.consumeItem(this.getEntityOwner());
		}

	}

	public static interface ItemCriteria {
		boolean withinCriteria(InventoryItem invItem);
	}

	@Override
	public void destroy() {
		this.jobController = null;
		this.eatTimer = null;
		this.jobDelay = null;
		this.town = null;
		this.inventory = null;
	}

}
