package com.mygdx.game.utility

import com.mygdx.game.entity.Entity
import java.util.ArrayList
import scala.collection.mutable.ArrayBuffer
import com.badlogic.gdx.math.Vector2
import com.mygdx.game.component.Transform

class GridScala(val width : Int, val height : Int, val padding : Int, val sizeOfSquare : Int) {
	
	object GridScala{
		private var grid : Array[Array[GridSquareScala]] = Array.ofDim[GridSquareScala](width,height);
		private var squareSize : Int = _;
		private var gridPadding : Int = _;
		
	def addEntityToGrid(e : Entity) : GridSquareScala = {
		val transform = e.transform; //Cache the transform
		val xIndex = ((transform.getWorldPosition().x/squareSize) + gridPadding).toInt;
		val yIndex = ((transform.getWorldPosition().y/squareSize) + gridPadding).toInt;
		return grid(xIndex)(yIndex).addEntity(e);
	}
	
	def removeEntityFromGrid(e : Entity) : Unit = {
		val transform = e.transform; //Cache the transform
		val xIndex = ((transform.getWorldPosition().x/squareSize) + gridPadding).toInt;
		val yIndex = ((transform.getWorldPosition().y/squareSize) + gridPadding).toInt;
		grid[xIndex][yIndex].removeEntity(e);
	}
	
	public static GridSquare updateGridSquare(GridSquare currSquare, Entity entity){
		Vector2 pos = entity.transform.getWorldPosition();
		int x = (int) (pos.x/squareSize + gridPadding);
		int y = (int) (pos.y/squareSize + gridPadding);
		if(grid[x][y].position.x != currSquare.position.x || grid[x][y].position.y != currSquare.position.y)
			return grid[x][y];
		return currSquare;
	}
	}
	
	class GridSquareScala(val x : Int, val y : Int, val width : Int, val height : Int) {
		
		private def entityList : ArrayBuffer[Entity] = new ArrayBuffer[Entity](5);
		
		def addEntity(e : Entity) : GridSquareScala = {
			entityList += e;
			return this;
		}
		
		def removeEntity(e : Entity):Boolean = {
			val index = this.entityList.indexOf(e);
			val entToReturn = this.entityList.remove(index);
			if(entToReturn == null)
				return false;
			return true;
		}
		
		def getEntityList() : ArrayList[Entity] = {
			return this.entityList.asInstanceOf[ArrayList[Entity]];
		}
		
		def getEntityListAsBuffer() : ArrayBuffer[Entity] = {
			return this.entityList;
		}
	}
	
	/*
	 private static GridSquare[][] grid;
	private static int squareSize;
	private static int gridPadding;

	public Grid(int width, int height, int padding, int sizeOfSquare) {
		squareSize = sizeOfSquare;
		gridPadding = padding;
		
		grid = new GridSquare[width+padding*2][height+padding*2];
		
		for(int x=0;x<grid.length;x++){
			for(int y=0;y<grid[0].length;y++){
				grid[x][y] = new GridSquare((x-padding)*squareSize,(y-padding)*squareSize, squareSize, squareSize);
			}
		}
	}
	
	public static GridSquare addEntityToGrid(Entity e){
		Transform transform = e.transform; //Cache the transform
		int xIndex = (int) ((transform.getWorldPosition().x/squareSize) + gridPadding);
		int yIndex = (int) ((transform.getWorldPosition().y/squareSize) + gridPadding);
		return grid[xIndex][yIndex].addEntity(e);
	}
	
	public static void removeEntityFromGrid(Entity e){
		Transform transform = e.transform; //Cache the transform
		int xIndex = (int) ((transform.getWorldPosition().x/squareSize) + gridPadding);
		int yIndex = (int) ((transform.getWorldPosition().y/squareSize) + gridPadding);
		grid[xIndex][yIndex].removeEntity(e);
	}
	
	public static GridSquare updateGridSquare(GridSquare currSquare, Entity entity){
		Vector2 pos = entity.transform.getWorldPosition();
		int x = (int) (pos.x/squareSize + gridPadding);
		int y = (int) (pos.y/squareSize + gridPadding);
		if(grid[x][y].position.x != currSquare.position.x || grid[x][y].position.y != currSquare.position.y)
			return grid[x][y];
		return currSquare;
	}
	
	/**
	 * Returns a list of all Entities within the radius specified from the position of the entity passed in.
	 * @param radius The radius of the search (in terms of grid squares).
	 * @param entity The Entity to search from. This will only be used for getting the position of the Entity.
	 * @param criteria The Criteria to satisfy.
	 * @return A list of Entities if Entities were found, an empty ArrayList otherwise.
	 */
	public static ArrayList<Entity> getEntitiesInRadiusByCriteria(int radius,  Entity entity, SearchCriteria criteria){
		return getEntitiesInRadiusByCriteria(radius, entity.transform.getWorldPosition(), criteria);
	}
	
	/**
	 * Returns a list of all Entities within the radius specified from the position passed in.
	 * @param radius The radius of the search (in terms of grid squares).
	 * @param entity The Entity to search from. This will only be used for getting the position of the Entity.
	 * @param criteria The Criteria to satisfy.
	 * @return A list of Entities if Entities were found, an empty ArrayList otherwise.
	 */
	public static ArrayList<Entity> getEntitiesInRadiusByCriteria(int radius, Vector2 position, SearchCriteria criteria){
		SearchRange range = new SearchRange(radius, position);
		
		ArrayList<Entity> list = new ArrayList<Entity>();
		
		for(int x=range.startX;x<=range.endX;x++){ //For each X
			for(int y=range.startY;y<=range.endY;y++){ //For each Y
				ArrayList<Entity> entList = grid[x][y].getEntityList(); //Cache the list.
				for(Entity gridEnt : entList) //For each Entity in the list from the GridSquare
					if(criteria.withinCriteria(gridEnt)) //If the Entity name matches the required name.
						list.add(gridEnt); //Add it to the list.
			}
		}
		return list;
	}
	
	/**
	 * Returns the closest Entity within a radius of the Entity passed in. This Entity must satisfy the SearchCriteria passed in.
	 * This will use breadth-first search style (but not the actual technique) to search for the closest valid Entity.
	 * @param radius The maximum radius to find an Entity.
	 * @param entity The Entity we are searching from. This is used to get the starting position of the search.
	 * @param criteria The SearchCriteria that must be satisfied.
	 * @return The closest valid Entity if found, null otherwise.
	 */
	public static Entity getClosestEntityByCriteria(int radius, Entity entity, SearchCriteria criteria){
		return getClosestEntityByCriteria(radius, entity.transform.getWorldPosition(), criteria);
	}
	
	/**
	 * Returns the closest Entity within a radius of the Entity passed in. This Entity must satisfy the SearchCriteria passed in.
	 * This will use breadth-first search style (but not the actual technique) to search for the closest valid Entity.
	 * @param radius The maximum radius to find an Entity.
	 * @param position The starting position of the search.
	 * @param criteria The SearchCriteria that must be satisfied.
	 * @return The closest valid Entity if found, null otherwise.
	 */
	public static Entity getClosestEntityByCriteria(int radius, Vector2 position, SearchCriteria criteria){
		int currRadius = 0;
		SearchRange range;
		
		ArrayList<Entity> list = new ArrayList<Entity>();
		Entity closestEntity=null;
		
		while(closestEntity == null && currRadius <= radius){
			range = new SearchRange(currRadius, position);
			
			for(int y=range.startY;y<=range.endY;y++){
				for(int x=range.startX;x<=range.endX;x++){
					if((y == range.startY || y == range.endY) || (x == range.startX || x == range.endX)){
						list.addAll(grid[x][y].getEntityList());
					}
				}
			}
			
			closestEntity = closestEntityFunc(criteria, list, range);
			list.clear();
			currRadius++;
		}
		
		return closestEntity;
	}
	
	private static Entity closestEntityFunc(SearchCriteria criteria, ArrayList<Entity> list, SearchRange range){
		Entity closestEntity=null;
		float closestDist=9999999999999f;
		
		for(Entity ent : list){
			if(criteria.withinCriteria(ent)){
				Vector2 otherPos = ent.transform.getWorldPosition(); //Cache the local ent's location
				float distance = Math.abs(range.entPos.x - otherPos.x) + Math.abs(range.entPos.y - otherPos.y); //get the distance
				if(distance < closestDist){ //If the computed distance is less than the last closest
					closestDist = distance; //Set the distance
					closestEntity = ent; //Set the closest entity
					continue;
				}
			}
		}
		
		return closestEntity;
	}
	
	private static class SearchRange{
		public int startX, startY, endX, endY;
		public Vector2 entPos;
		
		public SearchRange(int radius, Vector2 positon){
			this.entPos = positon;
			this.startX = (int) ((this.entPos.x/squareSize + gridPadding) - radius);
			this.startY = (int) ((this.entPos.y/squareSize + gridPadding) - radius);
			this.endX = (int) ((this.entPos.x/squareSize + gridPadding) + radius);
			this.endY = (int) ((this.entPos.y/squareSize + gridPadding) + radius);
			
			this.startX = MathUtils.clamp(startX, 0, grid.length-1);
			this.startY = MathUtils.clamp(startY, 0, grid.length-1);
			this.endX = MathUtils.clamp(endX, 0, grid.length-1);
			this.endY = MathUtils.clamp(endY, 0, grid.length-1);
		}
	}

	public class GridSquare {
		public Vector2 position;
		public int width, height;
		
		private ArrayList<Entity> entityList;

		public GridSquare(int x, int y, int width, int height) {
			this.position = new Vector2(x, y);
			this.width = width;
			this.height = height;
			entityList = new ArrayList<Entity>();
		}
		
		public GridSquare addEntity(Entity e){
			entityList.add(e);
			return this;
		}
		
		public boolean removeEntity(Entity e){
			return this.entityList.remove(e);
		}
		
		public ArrayList<Entity> getEntityList(){
			return this.entityList;
		}
	}
	 */
}